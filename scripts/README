This folder contains a number of utility scripts for managing the db and fixtures.

# create_db.sh and drop_db.sh
create_db.sh and drop_db.sh create and drop the DB. You may have to edit to get the path right. 
They need psql on the path, which should be there on most platforms. Try them and see.

# json_fixture2csv.py

json_fixture2csv.py converts a json fixture produced by Djangos dumpdata into csv form extracting a single model into a single spreadsheet.

eg: dump all data and extract just timetables.eventsourcetag
/usr/bin/python app/manage.py  dumpdata timetables | /usr/bin/python scripts/json_fixture2csv.py timetables.eventsourcetag > eventsourcetag.csv

or better, just dump that table.
/usr/bin/python app/manage.py  dumpdata timetables.eventsourcetag | /usr/bin/python scripts/json_fixture2csv.py timetables.eventsourcetag > eventsourcetag.csv

Once dumped, CSV files are easilly manipulated in Google Spreadsheets.

# csv2json_fixture.py

csv2json_fixture.py performs the reverse operation taking a CSV file generated by json_fixture2csv.py 
and converting it back into json suitable for use as a fixture. The CSV files must conform to the format produced by json_fixture2csv.py.
The first row must contain column names, in any order. The column names must include _pk and _model. _pk is the primary key and _model is the name 
of the model (eg timetables.eventsource). All other columns, that have a name are treated as a field in the model. If you need a None data value, then use 
the word None. If you need to hash a value with HierachicalModel.hash() then prefix the value with _hash:  

eg _hash:a/path/to/a/thing will insert HierachicalModel.hash("a/path/to/a/thing")


# concat_json.py 

concat_json.py validates and joins multiple json files together into a large single array of objects.

eg
/usr/bin/python scripts/concat_json.py things2.json things2-eventsource.json things2-eventsourcetag.json 
